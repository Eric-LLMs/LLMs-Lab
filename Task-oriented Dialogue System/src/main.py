from DialogManager import DialogManager
from BussinessRequirement import BussinessRequirement

if __name__ == '__main__':
    br = BussinessRequirement()
    dm = DialogManager(br.prompt_templates)  # Two rounds of dialogue
    print("# Round 1")
    response = dm.run("300 is too expensive, do you have anything under 200 yuan?")
    print("===response===")
    print(response)

    print("# Round 2")
    response = dm.run("Which plan has the most data?")
    print("===response===")
    print(response)

""" 
Analysis of Two Rounds of Input Requests and ChatCompletion Objects:

    Input Message 1
    [
        {
            'role': 'system',  # System role message, defines the context or role of the current conversation
            'content': 'You are a customer service representative for mobile data plans, your name is Baymax. You can help users choose the most suitable data plan.'
            # Content of the system message, setting the role as "Baymax," responsible for helping users choose data plans
        },
        {
            'role': 'user',  # User role message, represents the content input by the user
            'content': 'User said: 300 is too expensive, do you have anything under 200 yuan? \n\nIntroduce the following product to the user: Economy Plan, monthly fee of 50 yuan, with 10 GB of data per month.'
            # Content of the user message, asking if there is a plan under 200 yuan and requesting the introduction of the "Economy Plan" product
        }
    ]

    Response Message 1
    ChatCompletion(
        id='chatcmpl-A0RmZrO9Z2j01KcVYC58mYEAQSRe3',  # Unique request ID
        choices=[  # List of generated responses, typically containing one or more Choice objects
            Choice(
                finish_reason='stop',  # Reason for completion, indicating that the model has finished text generation
                index=0,  # Index of the current response in the list
                logprobs=None,  # No token probability information returned, hence None
                message=ChatCompletionMessage(  # Contains the generated message content and related information
                    content='Hello! I understand that the 300 yuan plan may be a bit expensive for you. How about considering our Economy Plan? It offers a monthly fee of 50 yuan and includes 10 GB of data per month. This plan could be a more budget-friendly option for you. Would you like more details about this plan?',
                    # Text content generated by the model, responding to the user's inquiry and introducing the "Economy Plan"
                    role='assistant',  # Role of the assistant
                    function_call=None,  # No function call, hence None
                    tool_calls=None,  # No tool calls, hence None
                    refusal=None  # No refusal to provide content, hence None
                )
            )
        ],
        created=1724670159,  # UNIX timestamp representing the time when the request was created
        model='gpt-3.5-turbo-0125',  # Specific model name and version used
        object='chat.completion',  # Object type indicating this is a chat completion object
        service_tier=None,  # Service tier not set, hence None
        system_fingerprint=None,  # System fingerprint information for tracking requests, not set, hence None
        usage=CompletionUsage(  # Metadata about token usage
            completion_tokens=65,  # Number of tokens used in the response
            prompt_tokens=87,  # Number of tokens used in the prompt (user input)
            total_tokens=152  # Total number of tokens (sum of prompt and response tokens)
        )
    )

    Input Message 2
    [
        {
            'role': 'system',  # System role message, defines the context or role of the current conversation
            'content': 'You are a customer service representative for mobile data plans, your name is Baymax. You can help users choose the most suitable data plan.'
            # Content of the system message, setting the role as "Baymax," responsible for helping users choose data plans
        },
        {
            'role': 'user',  # User role message, represents the content input by the user
            'content': '300 is too expensive, do you have anything under 200 yuan?'  # Content of the user message, asking if there is a plan under 200 yuan
        },
        {
            'role': 'assistant',  # Assistant role message, represents the assistant's response
            'content': 'Hello! I understand that the 300 yuan plan may be a bit expensive for you. How about considering our Economy Plan? It offers a monthly fee of 50 yuan and includes 10 GB of data per month. This plan could be a more budget-friendly option for you. Would you like more details about this plan?'
            # Content of the assistant's reply, introducing the "Economy Plan"
        },
        {
            'role': 'user',  # User role message, represents the content input by the user
            'content': 'User said: Which plan has the most data? \n\nIntroduce the following product to the user: Travel Plan, monthly fee of 180 yuan, with 100 GB of data per month.'
            # Content of the user message, asking which plan provides the most data and requesting the introduction of the "Travel Plan" product
        }
    ]

    Response Message 2
    ChatCompletion(
        id='chatcmpl-A0RmcLa4J7nM9v4ug1prDIdsHg2Gk',  # Unique request ID
        choices=[  # List of generated responses, typically containing one or more Choice objects
            Choice(
                finish_reason='stop',  # Reason for completion, indicating that the model has finished text generation
                index=0,  # Index of the current response in the list
                logprobs=None,  # No token probability information returned, hence None
                message=ChatCompletionMessage(  # Contains the generated message content and related information
                    content="Hello! If you're looking for a plan with the most data, I recommend our Travel Plan. It comes with a monthly fee of 180 yuan and includes a generous 100 GB of data per month. This plan is perfect for heavy data users or for those who travel frequently and need a lot of data on the go. Would you like more information about the Travel Plan or any other plan options?",
                    # Text content generated by the model, responding to the user's inquiry and introducing the "Travel Plan"
                    role='assistant',  # Role of the assistant
                    function_call=None,  # No function call, hence None
                    tool_calls=None,  # No tool calls, hence None
                    refusal=None  # No refusal to provide content, hence None
                )
            )
        ],
        created=1724670162,  # UNIX timestamp representing the time when the request was created
        model='gpt-3.5-turbo-0125',  # Specific model name and version used
        object='chat.completion',  # Object type indicating this is a chat completion object
        service_tier=None,  # Service tier not set, hence None
        system_fingerprint=None,  # System fingerprint information for tracking requests, not set, hence None
        usage=CompletionUsage(  # Metadata about token usage
            completion_tokens=81,  # Number of tokens used in the response
            prompt_tokens=166,  # Number of tokens used in the prompt (user input)
            total_tokens=247  # Total number of tokens (sum of prompt and response tokens)
        )
    )

    Status Changes Analysis:
    1. Role Definitions and Content Changes:
    - System Message: The role is consistently set as "Baymax," responsible for providing data plan recommendations.
    - User Message: The first user message inquires about a plan under 200 yuan, while the second user message asks which plan offers the most data.
    2. Model Responses:
    - First Response:
        - Content: Introduces the "Economy Plan," addressing the user's inquiry about a low-cost plan.
    - Second Response:
        - Content: Introduces the "Travel Plan," addressing the user's inquiry about the plan with the most data.
    3. Token Usage:
    - First Response:
        - completion_tokens: 65 tokens used in the response.
        - prompt_tokens: 87 tokens used in the prompt (user input).
        - total_tokens: 152 tokens in total (sum of prompt and response tokens).
    - Second Response:
        - completion_tokens: 81 tokens used in the response.
        - prompt_tokens: 166 tokens used in the prompt (user input).
        - total_tokens: 247 tokens in total (sum of prompt and response tokens).
    4. Timestamps:
    - First Response: Request creation time is UNIX timestamp 1724670159.
    - Second Response: Request creation time is UNIX timestamp 1724670162, slightly later than the first response.
    5. Other Information:
    - Model: The model used is 'gpt-3.5-turbo-0125' in both cases.
    - Object: The object type is 'chat.completion,' indicating this is a chat completion object.

    Summary of Changes:
    - System Role: Always set as "Baymax," responsible for providing data plan recommendations.
    - User Inquiries: Initially ask about a low-cost plan, then ask about the plan with the most data.
    - Model Responses: Generated appropriate responses based on different user inquiries.
"""
